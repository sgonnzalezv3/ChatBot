/* The following code was generated by JFlex 1.4.3 on 11/23/20, 4:03 PM */

package Principal;
import static Principal.Tokens2.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/23/20, 4:03 PM from the specification file
 * <tt>C:/Users/Assas/Documents/NetBeansProjects/finalApp/src/Principal/Lexer2.flex</tt>
 */
class Lexer2 {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\5\2\0\1\3\22\0\1\3\7\0\1\62\1\64"+
    "\2\0\1\3\1\63\1\0\1\4\12\2\5\0\1\61\1\0\1\23"+
    "\1\21\1\47\1\30\1\25\2\1\1\15\3\1\1\24\1\35\1\34"+
    "\1\43\1\1\1\42\1\1\1\36\1\27\1\46\2\1\1\50\2\1"+
    "\4\0\1\1\1\0\1\17\1\6\1\40\1\13\1\10\1\55\1\31"+
    "\1\20\1\7\1\54\1\52\1\16\1\33\1\11\1\14\1\53\1\41"+
    "\1\32\1\22\1\26\1\37\1\12\1\1\1\51\1\56\1\57\56\0"+
    "\1\45\7\0\1\60\21\0\1\44\uff3c\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\1\10\2\1\5"+
    "\1\6\2\2\1\5\1\6\1\5\6\2\1\5\1\2"+
    "\2\5\7\2\2\5\2\2\1\7\1\2\1\10\1\1"+
    "\1\4\7\2\1\11\4\2\1\12\4\2\1\6\6\2"+
    "\1\11\4\2\1\0\3\2\1\13\1\12\2\2\1\14"+
    "\13\2\1\6\6\2\1\14\1\5\3\2\1\14\14\2"+
    "\1\5\7\2\1\0\22\2\1\15\1\2\1\5\16\2"+
    "\1\0\3\2\1\12\2\2\1\15\25\2\1\5\1\2"+
    "\1\0\22\2\1\0\12\2\1\0\13\2\1\5\2\2"+
    "\1\15\6\2\1\0\1\14\21\2\1\0\22\2\1\15"+
    "\6\2\1\3\4\2\1\15\3\2\1\15\4\2\1\15"+
    "\3\2\1\0\1\2\1\15\2\2\1\15\5\2\1\0"+
    "\1\14\1\5\36\2\1\5\1\15\1\2\1\0\7\2"+
    "\1\0\4\2\1\5\4\2\1\16\1\15\10\2\1\15"+
    "\5\2\1\15\1\2\1\0\1\2\1\12\2\2\1\16"+
    "\6\2\1\15\1\0\4\2\1\0\6\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\u0109\0\u013e\0\u0173"+
    "\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b"+
    "\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e\0\u04c3"+
    "\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601\0\u0636\0\u066b"+
    "\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813"+
    "\0\u0848\0\u087d\0\152\0\u08b2\0\65\0\u08e7\0\u091c\0\u0951"+
    "\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\152\0\u0ac4"+
    "\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c"+
    "\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0ddf"+
    "\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87"+
    "\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f"+
    "\0\u1164\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2\0\u12d7"+
    "\0\152\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\152"+
    "\0\u144a\0\u147f\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd"+
    "\0\u15f2\0\u1627\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765"+
    "\0\u179a\0\152\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8"+
    "\0\u190d\0\u1942\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80"+
    "\0\u1ab5\0\u1aea\0\u1b1f\0\u1090\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3"+
    "\0\u1c28\0\u1c5d\0\u1c92\0\u1cc7\0\152\0\u1cfc\0\u0cd6\0\u1d31"+
    "\0\u1d66\0\u1d9b\0\u1dd0\0\u1e05\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9"+
    "\0\u1f0e\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\u2081"+
    "\0\u20b6\0\152\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf\0\u21f4"+
    "\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd\0\u2332\0\u2367\0\u239c"+
    "\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f\0\u2544"+
    "\0\u2579\0\u25ae\0\u1203\0\u25e3\0\u2618\0\u264d\0\u2682\0\u26b7"+
    "\0\u26ec\0\u2721\0\u2756\0\u278b\0\u27c0\0\u27f5\0\u282a\0\u285f"+
    "\0\u2894\0\u28c9\0\u28fe\0\u2933\0\u2968\0\u299d\0\u29d2\0\u2a07"+
    "\0\u2a3c\0\u2a71\0\u2aa6\0\u2adb\0\u2b10\0\u2b45\0\u2b7a\0\u2baf"+
    "\0\u2be4\0\u2c19\0\u2c4e\0\u2c83\0\u2cb8\0\u2ced\0\u2d22\0\u2d57"+
    "\0\u2d8c\0\u2dc1\0\u2df6\0\u2e2b\0\u2e60\0\u2e95\0\u2eca\0\u2eff"+
    "\0\u2f34\0\u2f69\0\u2f9e\0\u2fd3\0\u3008\0\u303d\0\u3072\0\u30a7"+
    "\0\u30dc\0\u3111\0\u3146\0\u317b\0\u31b0\0\u31e5\0\u321a\0\u324f"+
    "\0\u3284\0\u32b9\0\u32ee\0\u3323\0\u3358\0\u338d\0\u33c2\0\u33f7"+
    "\0\u342c\0\u3461\0\u3496\0\u34cb\0\u3500\0\u3535\0\u356a\0\u359f"+
    "\0\u35d4\0\u3609\0\u363e\0\u3673\0\u36a8\0\u36dd\0\u3712\0\u3747"+
    "\0\u377c\0\u37b1\0\u37e6\0\u381b\0\u3850\0\u3885\0\65\0\u38ba"+
    "\0\u38ef\0\u3924\0\u3959\0\u398e\0\u39c3\0\65\0\u39f8\0\u3a2d"+
    "\0\u3a62\0\u3a97\0\u3acc\0\u3b01\0\u3b36\0\u3b6b\0\u3ba0\0\u3bd5"+
    "\0\u3c0a\0\u3c3f\0\u3c74\0\u3ca9\0\u3cde\0\u3d13\0\u3d48\0\u3d7d"+
    "\0\u3db2\0\u3de7\0\u3e1c\0\u3e51\0\u3e86\0\u3ebb\0\u3ef0\0\u3f25"+
    "\0\u3f5a\0\u3f8f\0\u3fc4\0\u3ff9\0\u402e\0\u4063\0\u4098\0\u40cd"+
    "\0\u4102\0\u4137\0\u416c\0\u41a1\0\u41d6\0\u420b\0\u4240\0\u4275"+
    "\0\u42aa\0\u42df\0\u4314\0\u4349\0\u437e\0\u43b3\0\u43e8\0\u441d"+
    "\0\u4452\0\u4487\0\u44bc\0\u44f1\0\u4526\0\u455b\0\u4590\0\u45c5"+
    "\0\u45fa\0\u462f\0\u4664\0\u4699\0\u4314\0\u46ce\0\u4703\0\u4738"+
    "\0\u3acc\0\u476d\0\u47a2\0\u47d7\0\u480c\0\u4841\0\u4876\0\u48ab"+
    "\0\u48e0\0\u4915\0\u494a\0\u0c02\0\u497f\0\u49b4\0\u49e9\0\u4a1e"+
    "\0\u4a53\0\u4a88\0\u4abd\0\u4af2\0\u4b27\0\u4b5c\0\u4b91\0\u4bc6"+
    "\0\u4bfb\0\u4c30\0\u4c30\0\u4c65\0\u4c9a\0\u4ccf\0\u4d04\0\u4d39"+
    "\0\u4af2\0\u4d6e\0\u4da3\0\u4dd8\0\65\0\u4e0d\0\u4e42\0\152"+
    "\0\u4e77\0\u4eac\0\u4ee1\0\u4f16\0\u4f4b\0\u3111\0\u4b5c\0\u4f80"+
    "\0\u4fb5\0\u4fea\0\u501f\0\u5054\0\u5089\0\u50be\0\u50f3\0\u5128"+
    "\0\u515d\0\u5192\0\u51c7";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\5\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\2\2\1\45\1\46\1\47"+
    "\1\50\1\3\1\51\1\52\1\3\1\53\1\54\1\2"+
    "\1\55\1\56\2\2\66\0\2\3\3\0\36\3\2\0"+
    "\12\3\7\0\1\4\65\0\1\5\1\0\1\5\63\0"+
    "\1\57\61\0\2\3\3\0\1\3\1\60\4\3\1\61"+
    "\1\3\1\62\1\63\17\3\1\64\4\3\2\0\12\3"+
    "\6\0\2\3\3\0\3\3\1\65\32\3\2\0\12\3"+
    "\6\0\2\3\3\0\3\3\1\66\4\3\1\67\3\3"+
    "\1\70\15\3\1\71\3\3\2\0\12\3\6\0\2\3"+
    "\3\0\1\3\1\72\1\73\3\3\1\74\22\3\1\75"+
    "\4\3\2\0\12\3\6\0\2\3\3\0\2\3\1\76"+
    "\6\3\1\77\24\3\2\0\12\3\6\0\2\3\3\0"+
    "\1\3\1\100\1\101\3\3\1\102\27\3\2\0\12\3"+
    "\6\0\2\3\3\0\24\3\1\103\5\3\1\104\3\3"+
    "\2\0\7\3\1\105\2\3\6\0\2\3\3\0\6\3"+
    "\1\106\27\3\2\0\12\3\6\0\2\3\3\0\6\3"+
    "\1\107\2\3\1\110\24\3\2\0\12\3\6\0\2\3"+
    "\3\0\5\3\1\111\2\3\1\112\12\3\1\113\1\3"+
    "\1\114\10\3\1\115\1\0\10\3\1\116\1\117\6\0"+
    "\2\3\3\0\6\3\1\120\2\3\1\121\24\3\2\0"+
    "\12\3\6\0\2\3\3\0\1\3\1\60\34\3\2\0"+
    "\12\3\6\0\2\3\3\0\1\3\1\122\1\123\6\3"+
    "\1\124\17\3\1\125\4\3\2\0\12\3\6\0\2\3"+
    "\3\0\10\3\1\126\25\3\2\0\12\3\6\0\2\3"+
    "\3\0\6\3\1\107\2\3\1\67\24\3\2\0\12\3"+
    "\6\0\2\3\3\0\10\3\1\67\3\3\1\127\21\3"+
    "\2\0\12\3\6\0\2\3\3\0\1\3\1\130\1\131"+
    "\3\3\1\132\2\3\1\133\12\3\1\134\11\3\2\0"+
    "\12\3\6\0\2\3\3\0\1\3\1\135\7\3\1\136"+
    "\24\3\2\0\12\3\6\0\2\3\3\0\1\3\1\137"+
    "\1\140\14\3\1\141\16\3\2\0\12\3\6\0\2\3"+
    "\3\0\6\3\1\142\2\3\1\143\12\3\1\144\4\3"+
    "\1\145\4\3\2\0\12\3\6\0\2\3\3\0\2\3"+
    "\1\146\3\3\1\147\27\3\2\0\12\3\6\0\2\3"+
    "\3\0\1\3\1\150\1\151\6\3\1\152\17\3\1\153"+
    "\4\3\2\0\12\3\6\0\2\3\3\0\6\3\1\154"+
    "\27\3\2\0\12\3\6\0\2\3\3\0\1\3\1\150"+
    "\34\3\2\0\12\3\6\0\2\3\3\0\2\3\1\76"+
    "\26\3\1\125\4\3\2\0\12\3\6\0\2\3\3\0"+
    "\3\3\1\155\32\3\2\0\12\3\6\0\2\3\3\0"+
    "\1\3\1\156\4\3\1\157\2\3\1\160\1\161\11\3"+
    "\1\162\4\3\1\163\1\164\3\3\2\0\12\3\6\0"+
    "\2\3\3\0\31\3\1\165\4\3\2\0\12\3\6\0"+
    "\2\3\3\0\31\3\1\166\4\3\2\0\12\3\6\0"+
    "\2\3\3\0\24\3\1\103\11\3\2\0\12\3\6\0"+
    "\2\3\3\0\3\3\1\167\32\3\2\0\12\3\6\0"+
    "\2\3\3\0\12\3\1\170\16\3\1\171\4\3\2\0"+
    "\12\3\6\0\2\3\3\0\27\3\2\172\5\3\2\0"+
    "\12\3\6\0\2\3\3\0\14\3\1\172\10\3\1\172"+
    "\10\3\2\0\12\3\6\0\2\3\3\0\2\3\1\173"+
    "\3\3\1\174\2\3\1\175\12\3\1\176\4\3\1\177"+
    "\4\3\2\0\12\3\6\0\2\3\3\0\6\3\1\200"+
    "\27\3\2\0\12\3\6\0\2\3\3\0\11\3\1\201"+
    "\24\3\2\0\12\3\70\0\1\202\1\0\5\57\1\0"+
    "\57\57\1\0\2\3\3\0\2\3\1\203\33\3\2\0"+
    "\12\3\6\0\2\3\3\0\3\3\1\204\14\3\1\205"+
    "\15\3\2\0\12\3\6\0\2\3\3\0\11\3\1\206"+
    "\24\3\2\0\12\3\6\0\2\3\3\0\24\3\1\207"+
    "\11\3\2\0\12\3\6\0\2\3\3\0\14\3\1\210"+
    "\21\3\2\0\7\3\1\211\2\3\6\0\2\3\3\0"+
    "\36\3\2\0\7\3\1\212\2\3\6\0\2\3\3\0"+
    "\4\3\1\213\31\3\2\0\12\3\6\0\2\3\3\0"+
    "\2\3\1\150\3\3\1\214\2\3\1\125\6\3\1\215"+
    "\11\3\1\216\3\3\2\0\12\3\6\0\2\3\3\0"+
    "\6\3\1\217\27\3\2\0\12\3\6\0\2\3\3\0"+
    "\36\3\2\0\4\3\1\220\5\3\6\0\2\3\3\0"+
    "\23\3\1\221\12\3\2\0\12\3\6\0\2\3\3\0"+
    "\14\3\1\172\10\3\1\222\4\3\1\223\3\3\2\0"+
    "\12\3\6\0\2\3\3\0\2\3\1\224\33\3\2\0"+
    "\12\3\6\0\2\3\3\0\24\3\1\225\11\3\2\0"+
    "\12\3\6\0\2\3\3\0\10\3\1\226\25\3\2\0"+
    "\12\3\6\0\2\3\3\0\11\3\1\227\2\3\1\230"+
    "\6\3\1\231\1\3\1\232\10\3\2\0\7\3\1\233"+
    "\2\3\6\0\2\3\3\0\1\234\13\3\1\235\21\3"+
    "\2\0\12\3\6\0\2\3\3\0\14\3\1\172\21\3"+
    "\2\0\12\3\6\0\2\3\3\0\5\3\1\236\30\3"+
    "\2\0\12\3\6\0\2\3\3\0\12\3\1\237\23\3"+
    "\2\0\12\3\6\0\2\3\3\0\2\3\1\240\33\3"+
    "\2\0\12\3\6\0\2\3\3\0\10\3\1\241\25\3"+
    "\2\0\12\3\6\0\2\3\3\0\14\3\1\67\21\3"+
    "\2\0\12\3\6\0\2\3\3\0\1\3\1\242\34\3"+
    "\2\0\12\3\6\0\2\3\3\0\23\3\1\243\12\3"+
    "\2\0\12\3\6\0\2\3\3\0\24\3\1\244\11\3"+
    "\2\0\12\3\6\0\2\3\3\0\11\3\1\245\24\3"+
    "\2\0\12\3\65\0\1\246\5\0\2\3\3\0\2\3"+
    "\1\247\33\3\2\0\12\3\6\0\2\3\3\0\31\3"+
    "\1\250\4\3\2\0\12\3\6\0\2\3\3\0\10\3"+
    "\1\241\13\3\1\251\11\3\2\0\10\3\1\252\1\3"+
    "\6\0\2\3\3\0\1\253\2\3\1\225\32\3\2\0"+
    "\10\3\1\225\1\3\6\0\2\3\3\0\2\3\1\254"+
    "\33\3\2\0\12\3\6\0\2\3\3\0\1\3\1\102"+
    "\22\3\1\255\11\3\2\0\12\3\6\0\2\3\3\0"+
    "\1\256\31\3\1\210\3\3\2\0\12\3\6\0\2\3"+
    "\3\0\14\3\1\150\21\3\2\0\12\3\6\0\2\3"+
    "\3\0\23\3\1\257\12\3\2\0\12\3\6\0\2\3"+
    "\3\0\32\3\1\216\3\3\2\0\12\3\6\0\2\3"+
    "\3\0\2\3\1\260\33\3\2\0\12\3\6\0\2\3"+
    "\3\0\3\3\1\261\21\3\1\262\10\3\2\0\12\3"+
    "\6\0\2\3\3\0\5\3\1\263\12\3\1\264\15\3"+
    "\2\0\12\3\6\0\2\3\3\0\3\3\1\150\4\3"+
    "\1\265\13\3\1\266\11\3\2\0\12\3\6\0\2\3"+
    "\3\0\2\3\1\102\33\3\2\0\12\3\6\0\2\3"+
    "\3\0\2\3\1\267\33\3\2\0\12\3\6\0\2\3"+
    "\3\0\10\3\1\265\25\3\2\0\12\3\6\0\2\3"+
    "\3\0\23\3\1\270\12\3\2\0\12\3\6\0\2\3"+
    "\3\0\1\234\35\3\2\0\12\3\6\0\2\3\3\0"+
    "\24\3\1\271\11\3\2\0\12\3\6\0\2\3\3\0"+
    "\3\3\1\272\20\3\1\273\11\3\2\0\12\3\6\0"+
    "\2\3\3\0\11\3\1\274\24\3\2\0\12\3\6\0"+
    "\2\3\3\0\14\3\1\275\15\3\1\276\3\3\2\0"+
    "\12\3\6\0\2\3\3\0\10\3\1\277\1\300\24\3"+
    "\2\0\12\3\6\0\2\3\3\0\36\3\2\0\5\3"+
    "\1\301\1\263\3\3\6\0\2\3\3\0\5\3\1\302"+
    "\6\3\1\303\21\3\2\0\12\3\6\0\2\3\3\0"+
    "\14\3\1\252\7\3\1\304\11\3\1\305\1\0\12\3"+
    "\6\0\2\3\3\0\32\3\1\306\3\3\2\0\12\3"+
    "\6\0\2\3\3\0\25\3\1\222\10\3\2\0\12\3"+
    "\6\0\2\3\3\0\6\3\1\214\2\3\1\125\24\3"+
    "\2\0\12\3\6\0\2\3\3\0\3\3\1\307\32\3"+
    "\2\0\12\3\6\0\2\3\3\0\10\3\1\310\3\3"+
    "\1\311\7\3\1\312\1\313\10\3\2\0\12\3\6\0"+
    "\2\3\3\0\3\3\1\314\4\3\1\315\13\3\1\316"+
    "\1\317\10\3\2\0\12\3\6\0\2\3\3\0\6\3"+
    "\1\320\2\3\1\321\24\3\2\0\12\3\6\0\2\3"+
    "\3\0\6\3\1\322\27\3\2\0\12\3\6\0\2\3"+
    "\3\0\2\3\1\323\6\3\1\324\24\3\2\0\12\3"+
    "\6\0\2\3\3\0\14\3\1\325\21\3\2\0\12\3"+
    "\6\0\2\3\3\0\1\3\1\326\1\327\33\3\1\330"+
    "\1\0\12\3\6\0\2\3\3\0\1\3\1\331\1\327"+
    "\33\3\1\330\1\0\12\3\6\0\2\3\3\0\11\3"+
    "\1\125\24\3\2\0\12\3\6\0\2\3\3\0\11\3"+
    "\1\332\24\3\2\0\12\3\6\0\2\3\3\0\2\3"+
    "\1\333\33\3\2\0\12\3\6\0\2\3\3\0\5\3"+
    "\1\334\30\3\2\0\12\3\6\0\2\3\3\0\32\3"+
    "\1\335\3\3\2\0\12\3\6\0\2\3\3\0\3\3"+
    "\1\336\20\3\1\303\11\3\2\0\12\3\6\0\2\3"+
    "\3\0\2\3\1\337\3\3\1\340\27\3\2\0\12\3"+
    "\6\0\2\3\3\0\25\3\1\301\10\3\2\0\12\3"+
    "\6\0\2\3\3\0\24\3\1\341\11\3\2\0\12\3"+
    "\6\0\2\3\3\0\36\3\2\0\5\3\1\342\4\3"+
    "\7\0\1\343\63\0\2\3\3\0\3\3\1\344\32\3"+
    "\2\0\12\3\6\0\2\3\3\0\1\3\1\345\34\3"+
    "\2\0\12\3\6\0\2\3\3\0\11\3\1\102\24\3"+
    "\2\0\12\3\6\0\2\3\3\0\3\3\1\346\32\3"+
    "\2\0\12\3\6\0\2\3\3\0\11\3\1\347\24\3"+
    "\2\0\12\3\6\0\2\3\3\0\6\3\1\227\27\3"+
    "\2\0\12\3\6\0\2\3\3\0\11\3\1\350\24\3"+
    "\2\0\12\3\6\0\2\3\3\0\6\3\1\351\27\3"+
    "\2\0\12\3\6\0\2\3\3\0\1\3\1\352\34\3"+
    "\2\0\12\3\6\0\2\3\3\0\2\3\1\150\3\3"+
    "\1\214\2\3\1\125\24\3\2\0\12\3\6\0\2\3"+
    "\3\0\24\3\1\353\11\3\2\0\12\3\6\0\2\3"+
    "\3\0\3\3\1\354\32\3\2\0\12\3\6\0\2\3"+
    "\3\0\2\3\1\172\33\3\2\0\12\3\6\0\2\3"+
    "\3\0\24\3\1\263\11\3\2\0\12\3\6\0\2\3"+
    "\3\0\1\355\35\3\2\0\12\3\6\0\2\3\3\0"+
    "\12\3\1\356\23\3\2\0\12\3\6\0\2\3\3\0"+
    "\4\3\1\220\31\3\2\0\12\3\6\0\2\3\3\0"+
    "\2\3\1\357\3\3\1\320\27\3\2\0\12\3\6\0"+
    "\2\3\3\0\36\3\2\0\5\3\1\360\4\3\6\0"+
    "\2\3\3\0\11\3\1\225\24\3\2\0\12\3\6\0"+
    "\2\3\3\0\2\3\1\225\33\3\2\0\12\3\6\0"+
    "\2\3\3\0\2\3\1\361\33\3\2\0\12\3\6\0"+
    "\2\3\3\0\2\3\1\362\33\3\2\0\12\3\6\0"+
    "\2\3\3\0\32\3\1\363\3\3\2\0\12\3\6\0"+
    "\2\3\3\0\2\3\1\364\33\3\2\0\12\3\6\0"+
    "\2\3\3\0\6\3\1\172\27\3\2\0\12\3\6\0"+
    "\2\3\3\0\24\3\1\365\11\3\2\0\12\3\6\0"+
    "\2\3\3\0\11\3\1\150\24\3\2\0\12\3\6\0"+
    "\2\3\3\0\5\3\1\205\30\3\2\0\12\3\6\0"+
    "\2\3\3\0\6\3\1\150\22\3\1\366\4\3\2\0"+
    "\12\3\6\0\2\3\3\0\2\3\1\367\33\3\2\0"+
    "\12\3\6\0\2\3\3\0\24\3\1\370\11\3\2\0"+
    "\12\3\24\0\1\371\46\0\2\3\3\0\24\3\1\252"+
    "\11\3\2\0\12\3\6\0\2\3\3\0\10\3\1\372"+
    "\25\3\2\0\12\3\6\0\2\3\3\0\24\3\1\373"+
    "\11\3\2\0\12\3\6\0\2\3\3\0\1\3\1\374"+
    "\34\3\2\0\12\3\6\0\2\3\3\0\20\3\1\220"+
    "\15\3\2\0\12\3\6\0\2\3\3\0\1\3\1\374"+
    "\1\375\33\3\2\0\12\3\6\0\2\3\3\0\2\3"+
    "\1\76\33\3\2\0\12\3\6\0\2\3\3\0\31\3"+
    "\1\376\4\3\2\0\12\3\6\0\2\3\3\0\3\3"+
    "\1\377\32\3\2\0\12\3\6\0\2\3\3\0\1\3"+
    "\1\u0100\1\375\33\3\2\0\12\3\6\0\2\3\3\0"+
    "\36\3\2\0\5\3\1\u0101\4\3\6\0\2\3\3\0"+
    "\6\3\1\125\2\3\1\125\24\3\2\0\12\3\6\0"+
    "\2\3\3\0\11\3\1\u0102\24\3\2\0\12\3\6\0"+
    "\2\3\3\0\10\3\1\u0103\25\3\2\0\12\3\6\0"+
    "\2\3\3\0\5\3\1\356\30\3\2\0\12\3\6\0"+
    "\2\3\3\0\3\3\1\u0104\32\3\2\0\12\3\6\0"+
    "\2\3\3\0\1\3\1\u0105\34\3\2\0\12\3\6\0"+
    "\2\3\3\0\24\3\1\205\11\3\2\0\12\3\6\0"+
    "\2\3\3\0\23\3\1\301\12\3\2\0\12\3\6\0"+
    "\2\3\3\0\11\3\1\u0106\24\3\2\0\12\3\6\0"+
    "\2\3\3\0\32\3\1\u0107\3\3\2\0\12\3\6\0"+
    "\2\3\3\0\20\3\1\u0108\15\3\2\0\12\3\6\0"+
    "\2\3\3\0\32\3\1\u0109\3\3\2\0\12\3\6\0"+
    "\2\3\3\0\6\3\1\u010a\27\3\2\0\12\3\6\0"+
    "\2\3\3\0\10\3\1\u010b\25\3\2\0\12\3\6\0"+
    "\2\3\3\0\11\3\1\172\24\3\2\0\12\3\6\0"+
    "\2\3\3\0\1\3\1\205\34\3\2\0\12\3\6\0"+
    "\2\3\3\0\32\3\1\u0103\3\3\2\0\12\3\65\0"+
    "\1\u010c\5\0\2\3\3\0\12\3\1\335\23\3\2\0"+
    "\12\3\6\0\2\3\3\0\32\3\1\237\3\3\2\0"+
    "\12\3\6\0\2\3\3\0\6\3\1\u010d\27\3\2\0"+
    "\12\3\6\0\2\3\3\0\20\3\1\u010e\15\3\2\0"+
    "\12\3\6\0\2\3\3\0\24\3\1\u010f\11\3\2\0"+
    "\12\3\6\0\2\3\3\0\2\3\1\u0110\33\3\2\0"+
    "\5\3\1\u0111\4\3\6\0\2\3\3\0\32\3\1\u0112"+
    "\3\3\2\0\12\3\6\0\2\3\3\0\14\3\1\u0113"+
    "\21\3\2\0\11\3\1\u0114\6\0\2\3\3\0\6\3"+
    "\1\125\27\3\2\0\12\3\6\0\2\3\3\0\1\3"+
    "\1\u0115\34\3\2\0\12\3\6\0\2\3\3\0\24\3"+
    "\1\303\11\3\2\0\12\3\6\0\2\3\3\0\3\3"+
    "\1\u0116\27\3\1\u0117\2\3\2\0\12\3\6\0\2\3"+
    "\3\0\32\3\1\102\3\3\2\0\12\3\6\0\2\3"+
    "\3\0\14\3\1\u0118\7\3\1\210\11\3\2\0\12\3"+
    "\6\0\2\3\3\0\3\3\1\u0119\14\3\1\u011a\15\3"+
    "\2\0\12\3\6\0\2\3\3\0\20\3\1\210\15\3"+
    "\2\0\12\3\6\0\2\3\3\0\2\3\1\u011b\11\3"+
    "\1\u011c\3\3\1\u011d\15\3\2\0\12\3\6\0\2\3"+
    "\3\0\24\3\1\u011e\11\3\2\0\12\3\52\0\1\u011f"+
    "\20\0\2\3\3\0\2\3\1\u011b\33\3\2\0\12\3"+
    "\6\0\2\3\3\0\33\3\1\u0117\2\3\2\0\12\3"+
    "\6\0\2\3\3\0\24\3\1\210\11\3\2\0\12\3"+
    "\6\0\2\3\3\0\1\3\1\76\34\3\2\0\12\3"+
    "\6\0\2\3\3\0\6\3\1\214\2\3\1\214\24\3"+
    "\2\0\12\3\6\0\2\3\3\0\20\3\1\u0120\15\3"+
    "\2\0\12\3\6\0\2\3\3\0\32\3\1\u0121\3\3"+
    "\2\0\12\3\6\0\2\3\3\0\1\u0122\24\3\1\u0123"+
    "\10\3\2\0\12\3\6\0\2\3\3\0\5\3\1\u0124"+
    "\30\3\2\0\12\3\6\0\2\3\3\0\11\3\1\u0125"+
    "\24\3\2\0\12\3\7\0\1\343\61\0\1\u0126\1\0"+
    "\2\3\3\0\4\3\1\u0127\31\3\2\0\12\3\6\0"+
    "\2\3\3\0\20\3\1\u0128\15\3\2\0\12\3\6\0"+
    "\2\3\3\0\32\3\1\263\3\3\2\0\12\3\6\0"+
    "\2\3\3\0\20\3\1\316\15\3\2\0\12\3\6\0"+
    "\2\3\3\0\3\3\1\u0129\32\3\2\0\12\3\6\0"+
    "\2\3\3\0\24\3\1\u012a\11\3\2\0\12\3\6\0"+
    "\2\3\3\0\6\3\1\u012b\27\3\2\0\12\3\6\0"+
    "\2\3\3\0\1\3\1\u012c\34\3\2\0\12\3\6\0"+
    "\2\3\3\0\6\3\1\u012d\27\3\2\0\12\3\6\0"+
    "\2\3\3\0\24\3\1\u012e\11\3\2\0\12\3\6\0"+
    "\2\3\3\0\2\3\1\150\33\3\2\0\12\3\6\0"+
    "\2\3\3\0\3\3\1\u012f\32\3\2\0\12\3\6\0"+
    "\2\3\3\0\6\3\1\u0130\27\3\2\0\12\3\6\0"+
    "\2\3\3\0\24\3\1\u0131\11\3\2\0\12\3\6\0"+
    "\2\3\3\0\3\3\1\225\20\3\1\u0132\11\3\2\0"+
    "\12\3\6\0\2\3\3\0\24\3\1\u0133\11\3\2\0"+
    "\12\3\6\0\2\3\3\0\3\3\1\u0134\32\3\2\0"+
    "\12\3\6\0\2\3\3\0\20\3\1\u0135\15\3\2\0"+
    "\12\3\6\0\2\3\3\0\3\3\1\335\32\3\2\0"+
    "\12\3\6\0\2\3\3\0\23\3\1\u0136\12\3\2\0"+
    "\12\3\6\0\2\3\3\0\1\3\1\u0137\34\3\2\0"+
    "\12\3\20\0\1\u0138\52\0\2\3\3\0\2\3\1\214"+
    "\33\3\2\0\12\3\6\0\2\3\3\0\2\3\1\u0139"+
    "\33\3\2\0\12\3\6\0\2\3\3\0\11\3\1\u013a"+
    "\24\3\2\0\12\3\6\0\2\3\3\0\25\3\1\u013b"+
    "\10\3\2\0\12\3\6\0\2\3\3\0\3\3\1\u013c"+
    "\32\3\2\0\12\3\6\0\2\3\3\0\2\3\1\u013d"+
    "\2\3\1\301\30\3\2\0\12\3\6\0\2\3\3\0"+
    "\11\3\1\375\2\3\1\172\21\3\2\0\12\3\6\0"+
    "\2\3\3\0\24\3\1\u013e\11\3\2\0\12\3\6\0"+
    "\2\3\3\0\10\3\1\172\25\3\2\0\12\3\6\0"+
    "\2\3\3\0\11\3\1\227\24\3\2\0\12\3\6\0"+
    "\2\3\3\0\5\3\1\301\30\3\2\0\12\3\6\0"+
    "\2\3\3\0\20\3\1\u013f\15\3\2\0\12\3\6\0"+
    "\2\3\3\0\3\3\1\u0140\32\3\2\0\12\3\6\0"+
    "\2\3\3\0\1\3\1\u013c\34\3\2\0\12\3\6\0"+
    "\2\3\3\0\11\3\1\u0141\24\3\2\0\12\3\6\0"+
    "\2\3\3\0\1\3\1\172\34\3\2\0\12\3\6\0"+
    "\2\3\3\0\36\3\2\0\6\3\1\134\3\3\6\0"+
    "\2\3\3\0\25\3\1\u0142\10\3\2\0\12\3\24\0"+
    "\1\u0143\46\0\2\3\3\0\24\3\1\u0144\11\3\2\0"+
    "\12\3\6\0\2\3\3\0\6\3\1\u0145\27\3\2\0"+
    "\12\3\6\0\2\3\3\0\1\3\1\u0146\1\76\33\3"+
    "\2\0\12\3\6\0\2\3\3\0\3\3\1\u0147\32\3"+
    "\2\0\12\3\6\0\2\3\3\0\24\3\1\u0148\11\3"+
    "\2\0\12\3\6\0\2\3\3\0\2\3\1\u0149\33\3"+
    "\2\0\12\3\6\0\2\3\3\0\6\3\1\u014a\27\3"+
    "\2\0\12\3\6\0\2\3\3\0\6\3\1\u014b\27\3"+
    "\2\0\12\3\6\0\2\3\3\0\3\3\1\u011d\10\3"+
    "\1\u014c\21\3\2\0\12\3\6\0\2\3\3\0\32\3"+
    "\1\u014d\3\3\2\0\12\3\6\0\2\3\3\0\31\3"+
    "\1\u014e\4\3\2\0\12\3\6\0\2\3\3\0\20\3"+
    "\1\u014f\15\3\2\0\12\3\6\0\2\3\3\0\20\3"+
    "\1\u0150\15\3\2\0\12\3\6\0\2\3\3\0\24\3"+
    "\1\237\11\3\2\0\12\3\6\0\2\3\3\0\24\3"+
    "\1\u0151\11\3\2\0\12\3\6\0\2\3\3\0\1\3"+
    "\1\u0152\34\3\2\0\12\3\6\0\2\3\3\0\11\3"+
    "\1\u0153\24\3\2\0\12\3\6\0\2\3\3\0\1\3"+
    "\1\u0154\1\76\33\3\2\0\12\3\6\0\2\3\3\0"+
    "\11\3\1\u0155\24\3\2\0\12\3\6\0\2\3\3\0"+
    "\1\3\1\210\34\3\2\0\12\3\6\0\2\3\3\0"+
    "\11\3\1\u0156\24\3\2\0\12\3\6\0\2\3\3\0"+
    "\6\3\1\u0157\27\3\2\0\12\3\6\0\2\3\3\0"+
    "\11\3\1\u0158\24\3\2\0\12\3\6\0\2\3\3\0"+
    "\20\3\1\u0159\15\3\2\0\12\3\6\0\2\3\3\0"+
    "\2\3\1\u015a\33\3\2\0\12\3\6\0\2\3\3\0"+
    "\6\3\1\u012b\2\3\1\u012b\24\3\2\0\12\3\6\0"+
    "\2\3\3\0\5\3\1\u0103\30\3\2\0\12\3\6\0"+
    "\2\3\3\0\25\3\1\u015b\10\3\2\0\12\3\6\0"+
    "\2\3\3\0\14\3\1\225\21\3\2\0\12\3\6\0"+
    "\2\3\3\0\1\u015c\10\3\1\375\24\3\2\0\12\3"+
    "\6\0\2\3\3\0\25\3\1\u015d\10\3\2\0\12\3"+
    "\6\0\2\3\3\0\2\3\1\227\33\3\2\0\12\3"+
    "\6\0\2\3\3\0\32\3\1\u015e\3\3\2\0\12\3"+
    "\6\0\2\3\3\0\3\3\1\u015f\32\3\2\0\12\3"+
    "\6\0\2\3\3\0\2\3\1\u0160\33\3\2\0\12\3"+
    "\6\0\2\3\3\0\1\3\1\u0161\34\3\2\0\12\3"+
    "\6\0\2\3\3\0\1\3\1\u0162\34\3\2\0\12\3"+
    "\6\0\2\3\3\0\11\3\1\u0163\24\3\2\0\12\3"+
    "\6\0\2\3\3\0\11\3\1\u0164\24\3\2\0\12\3"+
    "\6\0\2\3\3\0\11\3\1\u0165\17\3\1\232\4\3"+
    "\2\0\12\3\6\0\2\3\3\0\10\3\1\u0166\25\3"+
    "\2\0\12\3\14\0\1\u0167\56\0\2\3\3\0\3\3"+
    "\1\u0168\32\3\2\0\12\3\6\0\2\3\3\0\3\3"+
    "\1\225\21\3\1\u013b\10\3\2\0\12\3\6\0\2\3"+
    "\3\0\6\3\1\u0169\27\3\2\0\12\3\6\0\2\3"+
    "\3\0\11\3\1\214\24\3\2\0\12\3\6\0\2\3"+
    "\3\0\3\3\1\225\32\3\2\0\12\3\6\0\2\3"+
    "\3\0\11\3\1\u016a\24\3\2\0\12\3\6\0\2\3"+
    "\3\0\2\3\1\u013d\6\3\1\u016b\24\3\2\0\12\3"+
    "\6\0\2\3\3\0\20\3\1\u016c\15\3\2\0\12\3"+
    "\6\0\2\3\3\0\24\3\1\u016d\11\3\2\0\12\3"+
    "\6\0\2\3\3\0\2\3\1\u016e\33\3\2\0\12\3"+
    "\16\0\1\u016f\54\0\2\3\3\0\1\3\1\u0170\1\214"+
    "\33\3\2\0\12\3\6\0\2\3\3\0\14\3\1\u0171"+
    "\21\3\2\0\12\3\6\0\2\3\3\0\2\3\1\u0172"+
    "\33\3\2\0\12\3\6\0\2\3\3\0\20\3\1\u0173"+
    "\15\3\2\0\12\3\6\0\2\3\3\0\11\3\1\u0174"+
    "\24\3\2\0\12\3\6\0\2\3\3\0\10\3\1\u0175"+
    "\25\3\2\0\12\3\6\0\2\3\3\0\3\3\1\u0176"+
    "\32\3\2\0\12\3\6\0\2\3\3\0\3\3\1\u0177"+
    "\32\3\2\0\12\3\6\0\2\3\3\0\2\3\1\u0178"+
    "\6\3\1\227\24\3\2\0\12\3\6\0\2\3\3\0"+
    "\10\3\1\205\25\3\2\0\12\3\6\0\2\3\3\0"+
    "\2\3\1\u0178\33\3\2\0\12\3\6\0\2\3\3\0"+
    "\11\3\1\u013d\24\3\2\0\12\3\6\0\2\3\3\0"+
    "\6\3\1\u0179\27\3\2\0\12\3\6\0\2\3\3\0"+
    "\2\3\1\u017a\3\3\1\225\27\3\2\0\12\3\6\0"+
    "\2\3\3\0\2\3\1\u017b\33\3\2\0\12\3\6\0"+
    "\2\3\3\0\3\3\1\u017c\20\3\1\225\11\3\2\0"+
    "\12\3\6\0\2\3\3\0\11\3\1\u0169\24\3\2\0"+
    "\12\3\6\0\2\3\3\0\10\3\1\u017d\25\3\2\0"+
    "\12\3\6\0\2\3\3\0\24\3\1\u017e\11\3\2\0"+
    "\12\3\6\0\2\3\3\0\32\3\1\u017f\3\3\2\0"+
    "\12\3\6\0\2\3\3\0\3\3\1\172\32\3\2\0"+
    "\12\3\6\0\2\3\3\0\1\3\1\u0180\4\3\1\102"+
    "\27\3\2\0\12\3\6\0\2\3\3\0\3\3\1\u0181"+
    "\32\3\2\0\12\3\6\0\2\3\3\0\11\3\1\u0157"+
    "\24\3\2\0\12\3\6\0\2\3\3\0\2\3\1\u0182"+
    "\6\3\1\u0183\24\3\2\0\12\3\6\0\2\3\3\0"+
    "\1\3\1\u0184\34\3\2\0\12\3\6\0\2\3\3\0"+
    "\1\3\1\u0185\34\3\2\0\12\3\6\0\2\3\3\0"+
    "\1\3\1\u0186\34\3\2\0\12\3\6\0\2\3\3\0"+
    "\3\3\1\u0187\32\3\2\0\12\3\6\0\2\3\3\0"+
    "\11\3\1\u017a\24\3\2\0\12\3\6\0\2\3\3\0"+
    "\1\u0188\35\3\2\0\12\3\6\0\2\3\3\0\3\3"+
    "\1\u0189\20\3\1\225\11\3\2\0\12\3\6\0\2\3"+
    "\3\0\3\3\1\u018a\32\3\2\0\12\3\6\0\2\3"+
    "\3\0\10\3\1\263\25\3\2\0\12\3\15\0\1\u018b"+
    "\21\0\1\u011f\33\0\2\3\3\0\5\3\1\u013b\30\3"+
    "\2\0\12\3\6\0\2\3\3\0\3\3\1\u0171\32\3"+
    "\2\0\12\3\6\0\2\3\3\0\1\231\2\3\1\u017c"+
    "\20\3\1\225\11\3\2\0\12\3\6\0\2\3\3\0"+
    "\1\3\1\u0103\34\3\2\0\12\3\6\0\2\3\3\0"+
    "\1\3\1\231\34\3\2\0\12\3\6\0\2\3\3\0"+
    "\3\3\1\u018c\32\3\2\0\12\3\24\0\1\u018d\46\0"+
    "\2\3\3\0\5\3\1\u018e\30\3\2\0\12\3\6\0"+
    "\2\3\3\0\6\3\1\150\27\3\2\0\12\3\6\0"+
    "\2\3\3\0\3\3\1\u017c\32\3\2\0\12\3\6\0"+
    "\2\3\3\0\2\3\1\225\6\3\1\u017e\24\3\2\0"+
    "\12\3\6\0\2\3\3\0\6\3\1\225\2\3\1\u0153"+
    "\24\3\2\0\12\3\6\0\2\3\3\0\32\3\1\u018f"+
    "\3\3\2\0\12\3\6\0\2\3\3\0\2\3\1\102"+
    "\27\3\1\u018f\3\3\2\0\12\3\6\0\2\3\3\0"+
    "\20\3\1\u0103\15\3\2\0\12\3\6\0\2\3\3\0"+
    "\14\3\1\u0190\21\3\2\0\12\3\6\0\2\3\3\0"+
    "\3\3\1\225\10\3\1\225\21\3\2\0\12\3\6\0"+
    "\2\3\3\0\24\3\1\374\11\3\2\0\12\3\6\0"+
    "\2\3\3\0\5\3\1\u0191\30\3\2\0\12\3\6\0"+
    "\2\3\3\0\6\3\1\u0192\27\3\2\0\12\3\6\0"+
    "\2\3\3\0\25\3\1\232\10\3\2\0\12\3\6\0"+
    "\2\3\3\0\1\3\1\u0193\34\3\2\0\12\3\6\0"+
    "\2\3\3\0\10\3\1\u014d\25\3\2\0\12\3\6\0"+
    "\2\3\3\0\1\3\1\u0194\34\3\2\0\12\3\6\0"+
    "\2\3\3\0\3\3\1\u013b\32\3\2\0\12\3\6\0"+
    "\2\3\3\0\32\3\1\316\3\3\2\0\12\3\6\0"+
    "\2\3\3\0\11\3\1\272\24\3\2\0\12\3\6\0"+
    "\2\3\3\0\1\u0195\35\3\2\0\12\3\6\0\2\3"+
    "\3\0\20\3\1\u0196\15\3\2\0\12\3\6\0\2\3"+
    "\3\0\2\3\1\u0197\6\3\1\u0197\24\3\2\0\12\3"+
    "\6\0\2\3\3\0\5\3\1\237\30\3\2\0\12\3"+
    "\16\0\1\u0198\54\0\2\3\3\0\20\3\1\u0199\15\3"+
    "\2\0\12\3\6\0\2\3\3\0\6\3\1\214\27\3"+
    "\2\0\12\3\6\0\2\3\3\0\1\3\1\u019a\34\3"+
    "\2\0\12\3\6\0\2\3\3\0\6\3\1\225\27\3"+
    "\2\0\12\3\6\0\2\3\3\0\3\3\1\303\32\3"+
    "\2\0\12\3\6\0\2\3\3\0\6\3\1\u0158\27\3"+
    "\2\0\12\3\6\0\2\3\3\0\5\3\1\316\30\3"+
    "\2\0\12\3\6\0\2\3\3\0\1\3\1\u019b\6\3"+
    "\1\u019c\25\3\2\0\12\3\20\0\1\u019d\52\0\2\3"+
    "\3\0\2\3\1\252\33\3\2\0\12\3\6\0\2\3"+
    "\3\0\10\3\1\u019e\25\3\2\0\12\3\6\0\2\3"+
    "\3\0\10\3\1\u019f\25\3\2\0\12\3\6\0\2\3"+
    "\3\0\2\3\1\125\33\3\2\0\12\3\21\0\1\u011f"+
    "\51\0\2\3\3\0\10\3\1\u01a0\25\3\2\0\12\3"+
    "\6\0\2\3\3\0\1\3\1\u01a1\34\3\2\0\12\3"+
    "\6\0\2\3\3\0\6\3\1\102\27\3\2\0\12\3"+
    "\6\0\2\3\3\0\5\3\1\u01a2\30\3\2\0\12\3"+
    "\6\0\2\3\3\0\11\3\1\u01a3\24\3\2\0\12\3"+
    "\6\0\2\3\3\0\5\3\1\150\30\3\2\0\12\3"+
    "\5\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[20988];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\52\1\1\11\37\1\1\0\64\1\1\0"+
    "\43\1\1\0\36\1\1\0\22\1\1\0\12\1\1\0"+
    "\25\1\1\0\22\1\1\0\22\1\1\11\6\1\1\11"+
    "\21\1\1\0\12\1\1\0\43\1\1\0\7\1\1\0"+
    "\33\1\1\0\1\1\1\11\12\1\1\0\4\1\1\0"+
    "\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[419];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer2(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer2(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 152) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens2 yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 13: 
          { return verbo;
          }
        case 15: break;
        case 5: 
          { return sust;
          }
        case 16: break;
        case 9: 
          { return art;
          }
        case 17: break;
        case 1: 
          { return ERROR;
          }
        case 18: break;
        case 3: 
          { lexeme=yytext(); return Num;
          }
        case 19: break;
        case 11: 
          { return interj;
          }
        case 20: break;
        case 10: 
          { return adv;
          }
        case 21: break;
        case 7: 
          { return conj;
          }
        case 22: break;
        case 6: 
          { return prep;
          }
        case 23: break;
        case 14: 
          { return det;
          }
        case 24: break;
        case 12: 
          { return adj;
          }
        case 25: break;
        case 8: 
          { return preg;
          }
        case 26: break;
        case 4: 
          { /*Ignore*/
          }
        case 27: break;
        case 2: 
          { lexeme=yytext(); return id;
          }
        case 28: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
