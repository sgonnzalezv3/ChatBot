/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Principal;

import java.awt.Image;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.util.logging.Level;
import java.util.logging.Logger;
import jdk.nashorn.internal.parser.Lexer;

/**
 *
 * @author Assas
 */
public class Ventana extends javax.swing.JFrame {

    public boolean verificar(String palabra) {
        boolean verificar = false;

        if (palabra.replace(" ", "").matches("[a-zA-Z_?0-9]*")) {
            verificar = true;
            System.out.println("correcto");
        } else {
            System.out.println("incorrecto");
        }
        return verificar;
    }

    public static char valorIncorrecto(String texto) {
        String nuevo = texto.replace(" ", "");
        String nuevo2 = nuevo.toLowerCase();
        char[] vector = nuevo2.toCharArray();
        char error = ' ';
        for (int i = 0; i < vector.length; i++) {
            if (vector[i] == 'a' || vector[i] == 'b' || vector[i] == 'c' || vector[i] == 'd' || vector[i] == 'e' || vector[i] == 'f'
                    || vector[i] == 'g' || vector[i] == 'h' || vector[i] == 'i' || vector[i] == 'j' || vector[i] == 'k'
                    || vector[i] == 'l' || vector[i] == 'm' || vector[i] == 'n' || vector[i] == 'o' || vector[i] == 'p' || vector[i] == 'q'
                    || vector[i] == 'r' || vector[i] == 's' || vector[i] == 't' || vector[i] == 'u' || vector[i] == 'v'
                    || vector[i] == 'w' || vector[i] == 'x' || vector[i] == 'y' || vector[i] == 'z' || vector[i] == 1 || vector[i] == 'l'
                    || vector[i] == 2 || vector[i] == '2' || vector[i] == 3 || vector[i] == '3' || vector[i] == 4 || vector[i] == '4'
                    || vector[i] == 5 || vector[i] == '5' || vector[i] == 6 || vector[i] == '6' || vector[i] == 7 || vector[i] == '7'
                    || vector[i] == 8 || vector[i] == '8' || vector[i] == '9' || vector[i] == 9) {
                System.out.println("severa");

            } else {
                System.out.println("loka rara");
                error = vector[i];
                i = vector.length - 1;
            }
        }
        System.out.println("hola");
        return error;
    }

    public static int palabras(String texto) {
        int palabras = 0;
        char espacio = ' ';
        char[] texto2 = texto.toCharArray();
        if (texto2.length > 0) {
            for (int i = 0; i < texto2.length - 1; i++) {
                if (i == 0 && (texto2[0] != espacio)) {
                    palabras++;
                } else {
                    if ((texto2[i] == espacio) && texto2[i + 1] != espacio) {
                        if (texto2[0] != ' ') {

                        }
                        palabras++;
                    }
                }

            }
        } else {
            palabras = 0;
        }

        return palabras;
    }

    public Ventana() {
        initComponents();
        this.setLocationRelativeTo(null);
    }

    public Image getIconImage() {
        Image icono = Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("Vista/sg.png"));
        return icono;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel5 = new javax.swing.JLabel();
        ErrorSintactico = new javax.swing.JLabel();
        Oracion2 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Oracion3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        ErrorLexico = new javax.swing.JLabel();
        AnSintactico = new javax.swing.JLabel();
        AnLexico = new javax.swing.JLabel();
        Oracion4 = new javax.swing.JLabel();
        Tokenizacion = new javax.swing.JLabel();
        Tokenizacion2 = new javax.swing.JLabel();
        Comprobrar1 = new javax.swing.JButton();
        Comprobrar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        OracionPoner = new javax.swing.JTextField();
        Oracion = new javax.swing.JLabel();
        BSalir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(857, 867));
        setUndecorated(true);
        getContentPane().setLayout(null);

        jLabel5.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Error Sintáctico en :");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(160, 700, 290, 30);

        ErrorSintactico.setBackground(new java.awt.Color(255, 255, 255));
        ErrorSintactico.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        ErrorSintactico.setForeground(new java.awt.Color(255, 255, 255));
        ErrorSintactico.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        getContentPane().add(ErrorSintactico);
        ErrorSintactico.setBounds(460, 690, 390, 50);

        Oracion2.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        Oracion2.setForeground(new java.awt.Color(255, 255, 255));
        Oracion2.setText("Tienda de ropa y tenis");
        getContentPane().add(Oracion2);
        Oracion2.setBounds(240, 30, 310, 30);

        jLabel8.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Error léxico en :");
        getContentPane().add(jLabel8);
        jLabel8.setBounds(160, 620, 230, 30);

        jLabel3.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Tokenización:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(10, 200, 190, 30);

        jLabel4.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Análisis Léxico :");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(10, 280, 280, 30);

        Oracion3.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        Oracion3.setForeground(new java.awt.Color(255, 255, 255));
        Oracion3.setText("* Procure no usar puntuaciones (, .)");
        getContentPane().add(Oracion3);
        Oracion3.setBounds(10, 820, 790, 30);

        jLabel7.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Análisis Sintáctico :");
        getContentPane().add(jLabel7);
        jLabel7.setBounds(10, 460, 280, 30);

        ErrorLexico.setBackground(new java.awt.Color(255, 255, 255));
        ErrorLexico.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        ErrorLexico.setForeground(new java.awt.Color(255, 255, 255));
        ErrorLexico.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        getContentPane().add(ErrorLexico);
        ErrorLexico.setBounds(460, 610, 390, 50);

        AnSintactico.setBackground(new java.awt.Color(255, 255, 255));
        AnSintactico.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        AnSintactico.setForeground(new java.awt.Color(255, 255, 255));
        AnSintactico.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        getContentPane().add(AnSintactico);
        AnSintactico.setBounds(290, 450, 560, 50);

        AnLexico.setBackground(new java.awt.Color(255, 255, 255));
        AnLexico.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        AnLexico.setForeground(new java.awt.Color(255, 255, 255));
        AnLexico.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        getContentPane().add(AnLexico);
        AnLexico.setBounds(290, 270, 560, 50);

        Oracion4.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        Oracion4.setForeground(new java.awt.Color(255, 255, 255));
        Oracion4.setText("* si aparece id, son palabras que aun no se han agregado");
        getContentPane().add(Oracion4);
        Oracion4.setBounds(10, 770, 790, 30);

        Tokenizacion.setBackground(new java.awt.Color(255, 255, 255));
        Tokenizacion.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        Tokenizacion.setForeground(new java.awt.Color(255, 255, 255));
        Tokenizacion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        getContentPane().add(Tokenizacion);
        Tokenizacion.setBounds(290, 190, 560, 50);

        Tokenizacion2.setBackground(new java.awt.Color(255, 255, 255));
        Tokenizacion2.setFont(new java.awt.Font("Arial Black", 1, 18)); // NOI18N
        Tokenizacion2.setForeground(new java.awt.Color(255, 255, 255));
        Tokenizacion2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        getContentPane().add(Tokenizacion2);
        Tokenizacion2.setBounds(290, 360, 560, 50);

        Comprobrar1.setBackground(new java.awt.Color(255, 255, 255));
        Comprobrar1.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        Comprobrar1.setForeground(new java.awt.Color(51, 102, 255));
        Comprobrar1.setText("Sintáctico");
        Comprobrar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Comprobrar1ActionPerformed(evt);
            }
        });
        getContentPane().add(Comprobrar1);
        Comprobrar1.setBounds(20, 660, 130, 80);

        Comprobrar.setBackground(new java.awt.Color(255, 255, 255));
        Comprobrar.setFont(new java.awt.Font("Arial Black", 0, 12)); // NOI18N
        Comprobrar.setForeground(new java.awt.Color(51, 102, 255));
        Comprobrar.setText("Léxico");
        Comprobrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComprobrarActionPerformed(evt);
            }
        });
        getContentPane().add(Comprobrar);
        Comprobrar.setBounds(20, 540, 130, 80);

        jLabel6.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Tokenización #2 :");
        getContentPane().add(jLabel6);
        jLabel6.setBounds(10, 370, 280, 30);

        OracionPoner.setFont(new java.awt.Font("Eras Demi ITC", 0, 24)); // NOI18N
        OracionPoner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OracionPonerActionPerformed(evt);
            }
        });
        getContentPane().add(OracionPoner);
        OracionPoner.setBounds(290, 100, 560, 50);

        Oracion.setFont(new java.awt.Font("Copperplate Gothic Bold", 0, 24)); // NOI18N
        Oracion.setForeground(new java.awt.Color(255, 255, 255));
        Oracion.setText("Escriba la oración :");
        getContentPane().add(Oracion);
        Oracion.setBounds(10, 110, 280, 30);

        BSalir.setBackground(new java.awt.Color(0, 102, 255));
        BSalir.setFont(new java.awt.Font("Arial Black", 1, 14)); // NOI18N
        BSalir.setForeground(new java.awt.Color(255, 255, 255));
        BSalir.setText("Exit");
        BSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BSalirActionPerformed(evt);
            }
        });
        getContentPane().add(BSalir);
        BSalir.setBounds(760, 20, 80, 29);

        jLabel1.setForeground(new java.awt.Color(255, 153, 102));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Vista/Imagenes/fondo_1.jpg"))); // NOI18N
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 860, 870);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    private void BSalirActionPerformed(java.awt.event.ActionEvent evt) {                                       
        // TODO add your handling code here:
        System.exit(0);
    }                                      

    private void OracionPonerActionPerformed(java.awt.event.ActionEvent evt) {                                             
        // TODO add your handling code here:
    }                                            

    private void ComprobrarActionPerformed(java.awt.event.ActionEvent evt) {                                           
        AnLexico.setText("");
        AnSintactico.setText("");
        ErrorLexico.setText("");
        ErrorSintactico.setText("");
        Tokenizacion.setText("");
        Tokenizacion2.setText("");
        File archivo = new File("archivo.txt");
        archivo.delete();
        PrintWriter escribir;

        try {
            escribir = new PrintWriter(archivo);
            escribir.print(OracionPoner.getText());
            escribir.close();

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Reader lector = new BufferedReader(new FileReader("archivo.txt"));

            Principal.Lexer lexer = new Principal.Lexer(lector);
            String resultado = "";
            if (verificar(OracionPoner.getText()) == true) {
                while (true) {
                    Tokens tokens = lexer.yylex();
                    if (tokens == null) {
                        resultado += "";
                        Tokenizacion.setText(resultado);

                        return;
                    }
                    switch (tokens) {
                        case ERROR:
                            resultado = lexer.lexeme;
                            ErrorLexico.setText("Error léxico!");
                            break;
                        case Num:
                            // resultado +=;
                            resultado += tokens + "   ";
                            ErrorLexico.setText("Oracion Correcta, [" + palabras(OracionPoner.getText()) + "] palabras reconocidas ");
                            break;

                        case id:
                            AnLexico.setText("Oracion Correcta, [" + palabras(OracionPoner.getText()) + "] palabras reconocidas ");
                            resultado += tokens + "   ";
                            break;
                        case Pregunta:
                            AnLexico.setText("Oracion Correcta, [" + palabras(OracionPoner.getText() ) + "] palabras reconocidas ");
                            resultado += tokens + "   ";
                            break;
                        default:
                            resultado += "Token: " + tokens + "   ";
                            AnLexico.setText("Oracion Correctaa");
                            break;

                    }

                }
            } else {
                Tokenizacion.setText("Error!");
                ErrorLexico.setText("Error en el caracter: [" + valorIncorrecto(OracionPoner.getText()) + "]");
            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }
        return;
    }                                          

    private void Comprobrar1ActionPerformed(java.awt.event.ActionEvent evt) {                                            

        AnLexico.setText("");
        AnSintactico.setText("");
        ErrorLexico.setText("");
        ErrorSintactico.setText("");
        Tokenizacion.setText("");
        Tokenizacion2.setText("");
        File archivo2 = new File("archivo.txt");
        archivo2.delete();
        PrintWriter escribir2;
        try {
            escribir2 = new PrintWriter(archivo2);
            escribir2.print(OracionPoner.getText().toLowerCase());
            escribir2.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Reader lector2 = new BufferedReader(new FileReader("archivo.txt"));

            Principal.Lexer2 lexer2 = new Principal.Lexer2(lector2);
            String resultado2 = "";
            if (verificar(OracionPoner.getText().toLowerCase()) == true) {
                while (true) {
                    Tokens2 tokens = lexer2.yylex();
                    if (tokens == null) {
                        resultado2 += "";
                        if (resultado2 == null) {
                            Tokenizacion2.setText("No sirve");
                        } else {
                            Tokenizacion2.setText(resultado2);
                        }

                        return;
                    }
                    switch (tokens) {
                        case ERROR:
                            resultado2 = lexer2.lexeme;
                            ErrorSintactico.setText("Palabras no reconocidas");
                            break;
                        case verbo:
                            // resultado +=;
                            resultado2 += tokens + "   ";
                            break;

                        case sust:
                            AnSintactico.setText("Oracion Correcta!");
                            resultado2 += tokens + "   ";
                            break;
                        case prep:
                            AnSintactico.setText("Oracion Correcta!");
                            resultado2 += tokens + "   ";
                            break;
                        case art:
                            AnSintactico.setText("Oracion Correcta!");
                            resultado2 += tokens + "   ";
                            break;
                        case adv:
                            AnSintactico.setText("Oracion Correcta!");
                            resultado2 += tokens + "   ";
                            break;
                        case interj:
                            AnSintactico.setText("Oracion Correcta!");
                            resultado2 += tokens + "   ";
                            break;
                        case conj:
                            AnSintactico.setText("Oracion Correcta!");
                            resultado2 += tokens + "   ";
                            break;
                        case det:
                            AnSintactico.setText("Oracion Correcta!");
                            resultado2 += tokens + "   ";
                            break;
                        case preg:
                            AnSintactico.setText("Oracion Correcta!");
                            resultado2 += tokens + "   ";
                            break;
                        case Num:
                            AnSintactico.setText("Oracion Correcta!");
                            resultado2 += tokens + "   ";
                            break;

                        default:
                            resultado2 += tokens + "  ";

                            AnSintactico.setText("palabras no reconocidas");
                            break;

                    }

                }
            } else {
                Tokenizacion2.setText("Error!");
                ErrorSintactico.setText("Error en el caracter: [" + valorIncorrecto(OracionPoner.getText()) + "]");

            }

        } catch (FileNotFoundException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Ventana.class.getName()).log(Level.SEVERE, null, ex);
        }        // TODO add your handling code here:
        return;
    }                                           

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify                     
    public javax.swing.JLabel AnLexico;
    public javax.swing.JLabel AnSintactico;
    private javax.swing.JButton BSalir;
    public javax.swing.JButton Comprobrar;
    public javax.swing.JButton Comprobrar1;
    public javax.swing.JLabel ErrorLexico;
    public javax.swing.JLabel ErrorSintactico;
    private javax.swing.JLabel Oracion;
    private javax.swing.JLabel Oracion2;
    private javax.swing.JLabel Oracion3;
    private javax.swing.JLabel Oracion4;
    public javax.swing.JTextField OracionPoner;
    public javax.swing.JLabel Tokenizacion;
    public javax.swing.JLabel Tokenizacion2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    // End of variables declaration                   
}
